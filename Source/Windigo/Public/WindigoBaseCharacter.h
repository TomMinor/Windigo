// Copyright 1998-2014 NCCA - Tom Minor, Tom Becque, George Hulm, Alex Long, Kathleen Kononczuk Sa All Rights Reserved.

#pragma once

#include "GameFramework/Character.h"
#include "WindigoSingletonLibrary.h"
#include "CharacterFootstepProperties.h"
#include "GameFootstepEffect.h"
#include "Perception/PawnSensingComponent.h"
#include "WindigoBaseCharacter.generated.h"

/*
@todo Subclass CharacterMovementComponent and add our new states
*/

UCLASS()
class WINDIGO_API AWindigoBaseCharacter : public ACharacter
{
	GENERATED_BODY()

public:
	AWindigoBaseCharacter(const FObjectInitializer& ObjectInitializer);

	//////////////////////////////////////////////////////////////////////////
	// UPawnSensingComponent Delegates
	UFUNCTION()
	void OnHearNoise(APawn *HeardPawn, const FVector &Location, float Volume);

	UFUNCTION()
	void OnSeePawn(APawn *SeenPawn);

	// Make a footstep sound and spawn a decal
	UFUNCTION(BlueprintCallable, Category = Events, meta = (FriendlyName = "Simulate Left Footstep"))
	virtual void SimulateLeftFootstep();

	// Make a footstep sound and spawn a decal
	UFUNCTION(BlueprintCallable, Category = Events, meta = (FriendlyName = "Simulate Right Footstep"))
	virtual void SimulateRightFootstep();

protected:
	/* Functions */
	virtual void BeginPlay() override;

	virtual void PostInitializeComponents() override;

	virtual void CreateFootstep(const FName& SocketName, bool bIsLeftfoot);

	virtual void CreateNoise(const FVector& Location);

	virtual FHitResult TraceGround(const FVector& Location, bool bDrawTrace = false) const;

	virtual TWeakObjectPtr<class UPhysicalMaterial> GetGroundPhysMaterial(const FHitResult& HitResult) const;

	virtual USoundCue* GetRandomFootstepSound(EPhysicalSurface PhysicalSurface) const;

	virtual UParticleSystem* GetRandomFootstepParticle(EPhysicalSurface PhysicalSurface) const;

	virtual UMaterial* GetRandomFootstepDecal(EPhysicalSurface PhysicalSurface, bool bIsLeft) const;

	virtual void Tick(float DeltaSeconds) override;

protected:
	/* Members  */
	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Noise")
	UPawnNoiseEmitterComponent* NoiseEmitter;

	// Extend this to also check footsteps maybe?	
	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Awareness")
	UPawnSensingComponent* CharacterSenses;

	UPROPERTY(EditDefaultsOnly, BlueprintReadWrite, Category = "Footstep")
	TSubclassOf<UCharacterFootstepProperties> FootstepInfo;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Footstep")
	TSubclassOf<AGameFootstepEffect> FootstepTemplate;
	
	UPROPERTY(EditDefaultsOnly, BlueprintReadWrite, Category = "Footstep")
	float FootstepLifetime;

	//////////////////////////////////////////////////////////////////////////
	/* Debug members */

	/* Should we log when characters see/hear each other */
	UPROPERTY(EditDefaultsOnly, BlueprintReadWrite, Category = "Awareness | Debug")
	bool bShouldLogAISenses;

	/* Draw hearing ranges of the character and draw any sounds that the character hears */
	UPROPERTY(EditDefaultsOnly, BlueprintReadWrite, Category = "Awareness | Debug")
	bool bDrawLastKnownSound;

	/* Draw lines to display the normal of footstep decals */
	UPROPERTY(EditDefaultsOnly, BlueprintReadWrite, Category = "Footstep | Debug")
	bool bDrawDecalNormals;
	
	/* Colour of the spherical markers generated by footsteps when DrawLastKnownSound is True */
	UPROPERTY(EditDefaultsOnly, BlueprintReadWrite, Category = "Footstep | Debug | Noise Emitter")
	FColor DebugSoundColour;

	/* Size of spherical sound markers */
	UPROPERTY(EditDefaultsOnly, BlueprintReadWrite, Category = "Footstep | Debug | Noise Emitter")
	float SoundRadius;

	/* Number of segments in the spherical markers */
	UPROPERTY(EditDefaultsOnly, BlueprintReadWrite, Category = "Footstep | Debug | Noise Emitter")
	int32 SoundRadiusSegments;

	/* How long the spherical markers live */
	UPROPERTY(EditDefaultsOnly, BlueprintReadWrite, Category = "Footstep | Debug | Noise Emitter")
	int32 SoundHearingLifetime;

	/* Colour of the spherical marker representing the character's occluded hearing range */
	UPROPERTY(EditDefaultsOnly, BlueprintReadWrite, Category = "Awareness | Debug | Hearing")
	FColor DebugOccludedHearingRangeColour;

	/* Colour of the spherical marker representing the character's unoccluded hearing range */
	UPROPERTY(EditDefaultsOnly, BlueprintReadWrite, Category = "Awareness | Debug | Hearing")
	FColor DebugUnoccludedHearingRangeColour;

	/* Number of segments in the spherical markers representing the character's hearing range */
	UPROPERTY(EditDefaultsOnly, BlueprintReadWrite, Category = "Awareness | Debug | Hearing")
	int32 HearingRangeSegments;

	/* Lifetime of the spherical marker (They are spawned every tick, set a very low value) */
	UPROPERTY(EditDefaultsOnly, BlueprintReadWrite, Category = "Awareness | Debug | Hearing")
	float HearingRangeLifetime;
};
